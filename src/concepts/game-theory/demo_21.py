"""
Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч (по своему выбору) один камень или увеличить количество камней в куче в два раза. Например, пусть в одной куче 10 камней, а в другой 5 камней; такую позицию в игре будем обозначать (10, 5). Тогда за один ход можно получить любую из четырёх позиций: (11, 5), (20, 5), (10, 6), (10, 10). Для того чтобы делать ходы, у каждого игрока есть неограниченное количество камней. Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 77. Победителем считается игрок, сделавший последний ход, т.е. первым получивший такую позицию, при которой в кучах будет 77 или больше камней. В начальный момент в первой куче было 7 камней, во второй куче – S камней; 1 ≤ S ≤ 69. Будем говорить, что игрок имеет выигрышную стратегию, если он может

выиграть при любых ходах противника. Описать стратегию игрока – значит описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, т.е. не являющиеся выигрышными независимо от игры противника. 

Задание 19.
Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение S, когда такая ситуация возможна.

Задание 20.
Для игры, описанной в предыдущем задании, найдите два таких значения S, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:

− Петя не может выиграть за один ход;

− Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.

Найденные значения запишите в ответе в порядке возрастания.


Задание 21.
Для игры, описанной в задании 19, найдите минимальное значение S, при котором одновременно выполняются два условия:

– у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;

– у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.
"""

WIN_LIMIT = 77

# (7, 1) -> [(14, 1), (8, 1), (7, 2), (7, 2)]


def moves(s1: int, s2: int):
    return [(s1 + 1, s2), (s1, s2 + 1), (s1 * 2, s2), (s1, s2 * 2)]


is_position_winning = [[None] * (WIN_LIMIT + 1) for _ in range(WIN_LIMIT + 1)]

for s1 in range(WIN_LIMIT+1):
    for s2 in range(WIN_LIMIT+1):
        if s1 + s2 >= WIN_LIMIT:
            is_position_winning[s1][s2] = False


for s1 in range(WIN_LIMIT+1):
    for s2 in range(WIN_LIMIT+1):
        for m1, m2 in moves(s1, s2):
            if (m1 + m2) >= WIN_LIMIT:
                is_position_winning[s1][s2] = True

for s1 in range(WIN_LIMIT+1):
    for s2 in range(WIN_LIMIT+1):
        for m1, m2 in moves(s1, s2):
            if m1 >= WIN_LIMIT:
                continue
            if m2 >= WIN_LIMIT:
                continue
            if is_position_winning[m1][m2] is True:
                if is_position_winning[s1][s2] is None:
                    is_position_winning[s1][s2] = 'Maybe False'

# for s1 in range():
#     ...


J_START = 60
J_END = 75

I_START = 70
I_END = 75

# print('  ',end='\t')
# for j in range(J_START, J_END):
#     print(j, end = '\t')
# print()

# for i in range(I_START, I_END):
#     print(i, end='\t')
#     for j in range(J_START, J_END):
#         match is_position_winning[i][j]:
#             case True:
#                 print('T', end='\t')
#             case False:
#                 print('F', end='\t')
#             case None:
#                 print('_', end='\t')
#     print()

S1 = 7
for s2 in range(1, 69+1):
    print(S1, s2, is_position_winning[S1][s2])